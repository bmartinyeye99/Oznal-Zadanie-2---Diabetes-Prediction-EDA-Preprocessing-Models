print(dim(tuning_validation))
cat("Distribúcia cieľovej premennej (Diabetes) v tuningovej validačnej sade:\n")
print(table(tuning_validation$Diabetes))
cat("Formula for Hyperparameter Tuning:\n")
formula_for_tuning
cat("Formula for Final Model:\n")
formula_for_final_model
set.seed(123)
final_model_svm <- svm(formula_for_tuning, data = training_data,
kernel = "sigmoid",
cost = 10,
gamma = 0.01,
probability = TRUE)
summary(final_model_svm)
predictions <- predict(final_model_svm, newdata = testing_data, probability = TRUE)
probabilities <- attr(predictions, "probabilities")[,2]
roc_result <- roc(testing_data$Diabetes, probabilities)
plot(roc_result, main = "ROC Curve")
abline(a = 0, b = 1, lty = 2, col = "gray")
coords <- coords(roc_result, "best", best.method = "youden")
optimal_cutoff <- coords$threshold
optimal_sensitivity <- coords$sensitivity
optimal_specificity <- coords$specificity
plot(roc_result)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
legend("bottomright", pch = 19, col = 'red', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
optimal_cutoff
predicted_classes <- ifelse(probabilities > optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
confusion_matrix <- confusionMatrix(predicted_classes, actual_classes)
predicted_classes <- ifelse(probabilities > optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
set.seed(123)
final_model_svm <- svm(formula_for_tuning, data = training_data,
kernel = "linear",
cost = 1,
probability = TRUE)
View(testing_data)
summary(final_model_svm)
predictions <- predict(final_model_svm, newdata = testing_data, probability = TRUE)
probabilities <- attr(predictions, "probabilities")[,2]
roc_result <- roc(testing_data$Diabetes, probabilities)
plot(roc_result, main = "ROC Curve")
print(roc_result$auc)
abline(a = 0, b = 1, lty = 2, col = "gray")
coords <- coords(roc_result, "best", best.method = "youden")
optimal_cutoff <- coords$threshold
optimal_sensitivity <- coords$sensitivity
optimal_specificity <- coords$specificity
plot(roc_result)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
legend("bottomright", pch = 19, col = 'red', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
optimal_cutoff
predicted_classes <- ifelse(probabilities > optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
predicted_classes <- ifelse(probabilities > optimal_cutoff, 0, 1)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
predicted_classes <- ifelse(probabilities > optimal_cutoff, 0, 1)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "0")
coords <- coords(roc_result, "best", best.method = "youden")
optimal_cutoff <- coords$threshold
optimal_sensitivity <- coords$sensitivity
optimal_specificity <- coords$specificity
print(optimal_sensitivity)
print(optimal_specificity)
plot(roc_result)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
legend("bottomright", pch = 19, col = 'red', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
optimal_cutoff
predicted_classes <- ifelse(probabilities > optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
predictions <- predict(final_model_svm, newdata = testing_data, probability = TRUE)
probabilities <- attr(predictions, "probabilities")[,2]
probabilities
roc_result <- roc(testing_data$Diabetes, probabilities)
plot(roc_result, main = "ROC Curve")
print(roc_result$auc)
abline(a = 0, b = 1, lty = 2, col = "gray")
predictions <- predict(final_model_svm, newdata = testing_data, probability = TRUE)
probabilities <- attr(predictions, "probabilities")[,2]
head(probabilities)
roc_result <- roc(testing_data$Diabetes, probabilities)
plot(roc_result, main = "ROC Curve")
print(roc_result$auc)
abline(a = 0, b = 1, lty = 2, col = "gray")
View(testing_data)
coords <- coords(roc_result, "best", best.method = "youden")
optimal_cutoff <- coords$threshold
optimal_sensitivity <- coords$sensitivity
optimal_specificity <- coords$specificity
print(optimal_sensitivity)
print(optimal_specificity)
plot(roc_result)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
legend("bottomright", pch = 19, col = 'red', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
optimal_cutoff
predicted_classes <- ifelse(probabilities < optimal_cutoff, 0, 1)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
predicted_classes <- ifelse(probabilities < optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
predicted_classes <- ifelse(probabilities > optimal_cutoff, 0, 1)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "0")
set.seed(123)
final_model_svm <- svm(formula_for_tuning, data = training_data,
kernel = "linear",
cost = 0.1,
probability = TRUE)
summary(final_model_svm)
predictions <- predict(final_model_svm, newdata = testing_data, probability = TRUE)
probabilities <- attr(predictions, "probabilities")[,2]
head(probabilities)
roc_result <- roc(testing_data$Diabetes, probabilities)
plot(roc_result, main = "ROC Curve")
print(roc_result$auc)
abline(a = 0, b = 1, lty = 2, col = "gray")
coords <- coords(roc_result, "best", best.method = "youden")
optimal_cutoff <- coords$threshold
optimal_sensitivity <- coords$sensitivity
optimal_specificity <- coords$specificity
print(optimal_sensitivity)
print(optimal_specificity)
plot(roc_result)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
legend("bottomright", pch = 19, col = 'red', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
optimal_cutoff
print(probabilities)
predicted_classes <- ifelse(probabilities > optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
print(probabilities)
predicted_classes <- ifelse(probabilities > optimal_cutoff, 0, 1)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "0")
print(probabilities)
predicted_classes <- ifelse(probabilities > optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "0")
#print(probabilities)
predicted_classes <- ifelse(probabilities > optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "0")
#print(probabilities)
predicted_classes <- ifelse(probabilities > optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
#print(probabilities)
predicted_classes <- ifelse(probabilities < optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
set.seed(123)
partition <- createDataPartition(data_balanced$Diabetes, p=0.9, list=FALSE)
training_data_nb <- data_balanced[partition, ]
testing_data_nb <- data_balanced[-partition, ]
nb_model <- naiveBayes(formula_for_final_model, data = training_data_nb)
summary(nb_model)
predictions <- predict(nb_model, newdata = testing_data_nb,  probability = TRUE)
set.seed(123)
predictions <- predict(nb_model, newdata = testing_data_nb,  probability = TRUE)
predictions
set.seed(123)
predictions <- predict(nb_model, newdata = testing_data_nb,  probability = TRUE)
probabilities <- attr(predictions, "probabilities")[,2]
head(precdictions)
set.seed(123)
predictions <- predict(nb_model, newdata = testing_data_nb,  probability = TRUE)
probabilities <- attr(predictions, "probabilities")[,2]
head(predictions)
head(probabilities)
set.seed(123)
predictions <- predict(nb_model, newdata = testing_data_nb,  probability = TRUE)
probabilities <- attr(predictions, "probabilities")[,2]
probabilities
set.seed(123)
probabilities <- predict(nb_model, newdata = testing_data_nb, type = "raw")
predictions <- prediction(probabilities[, "setosa"], test_data$Species == "setosa")
set.seed(123)
probabilities <- predict(nb_model, newdata = testing_data_nb, type = "raw")
predictions <- prediction(probabilities[, "setosa"], testing_data_nb$Species == "setosa")
set.seed(123)
probabilities <- predict(nb_model, newdata = testing_data_nb, type = "raw")
probabilities
set.seed(123)
probabilities <- predict(nb_model, newdata = testing_data_nb, type = "raw")
head(probabilities)
View(testing_data_nb)
plot(roc_curve, main = "ROC Curve for Naive Bayes Classifier", col = "blue")
```{r}
roc_curve <- roc(test_data$Species, probabilities[, "setosa"])
roc_curve <- roc(testing_data_nb$Diabetes, probabilities[, "setosa"])
set.seed(123)
probabilities <- predict(nb_model, newdata = testing_data_nb, type = "raw")
str(probabilities)
roc_curve <- roc(testing_data_nb$Diabetes, probabilities[, "1"])
plot(roc_curve, main = "ROC Curve for Naive Bayes Classifier", col = "blue")
roc_curve <- roc(testing_data_nb$Diabetes, probabilities[, "1"])
roc_curve$auc
plot(roc_curve, main = "ROC Curve for Naive Bayes Classifier", col = "blue")
roc_curve <- roc(testing_data_nb$Diabetes, probabilities[, "1"])
roc_curve$auc
plot(roc_curve, main = "ROC Curve for Naive Bayes Classifier", col = "blue")
abline(a = 0, b = 1, lty = 2, col = "gray")
coords <- coords(roc_curve, "best", best.method = "youden")
coords <- coords(roc_curve, "best", best.method = "youden")
optimal_cutoff <- coords$threshold
coords <- coords(roc_curve, "best", best.method = "youden")
optimal_cutoff_nb <- coords$threshold
coords <- coords(roc_curve, "best", best.method = "youden")
optimal_cutoff_nb <- coords$threshold
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
coords <- coords(roc_curve, "best", best.method = "youden")
optimal_cutoff_nb <- coords$threshold
print(coords)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
coords <- coords(roc_curve, "best", best.method = "youden")
optimal_cutoff_nb <- coords$threshold
print(coords)
plot(roc_curve)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
legend("bottomright", pch = 19, col = 'red', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
coords <- coords(roc_curve, "best", best.method = "youden.index")
coords <- coords(roc_curve, "best", best.method = "closest.topleft")
optimal_cutoff_nb <- coords$threshold
print(coords)
plot(roc_curve)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
legend("bottomright", pch = 19, col = 'red', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
coords <- coords(roc_curve, "best", best.method = "youden")
optimal_cutoff_nb <- coords$threshold
print(coords)
plot(roc_curve)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
legend("bottomright", pch = 19, col = 'red', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
coords <- coords(roc_curve, "best", best.method = "sensitivities")
coords <- coords(roc_curve, "best", best.method = "topleft")
optimal_cutoff_nb <- coords$threshold
print(coords)
plot(roc_curve)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
legend("bottomright", pch = 19, col = 'red', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
coords <- coords(roc_curve, "best", best.method = "youden")
optimal_cutoff_nb <- coords$threshold
print(coords)
plot(roc_curve)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
legend("bottomright", pch = 19, col = 'red', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
coords <- coords(roc_curve, "best", best.method = "youden")
optimal_cutoff_nb <- coords$threshold
print(coords)
plot(roc_curve)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'yellow', cex = 0.7)
legend("bottomright", pch = 19, col = 'yellow', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
predicted_classes <- ifelse(probabilities > optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data_nb$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
predicted_classes <- ifelse(probabilities > optimal_cutoff_nb, 1, 0)
# Skutočné triedy
actual_classes <- testing_data_nb$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
coords <- coords(roc_curve, "best", best.method = "youden")
optimal_cutoff_nb <- coords$threshold
print(coords)
plot(roc_curve)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'yellow', cex = 0.7)
legend("bottomright", pch = 19, col = 'yellow', legend = paste("Optimal cutoff:", round(optimal_cutoff_nb, 4)))
set.seed(123)
probabilities <- predict(nb_model, newdata = testing_data_nb, type = "raw")
str(probabilities)
roc_curve <- roc(testing_data_nb$Diabetes, probabilities[, "1"])
roc_curve$auc
plot(roc_curve, main = "ROC Curve for Naive Bayes Classifier", col = "blue")
abline(a = 0, b = 1, lty = 2, col = "gray")
coords <- coords(roc_curve, "best", best.method = "youden")
optimal_cutoff_nb <- coords$threshold
print(coords)
plot(roc_curve)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'yellow', cex = 0.7)
legend("bottomright", pch = 19, col = 'yellow', legend = paste("Optimal cutoff:", round(optimal_cutoff_nb, 4)))
set.seed(123)
probabilities_nb <- predict(nb_model, newdata = testing_data_nb, type = "raw")
str(probabilities_nb)
roc_curve <- roc(testing_data_nb$Diabetes, probabilities_nb[, "1"])
roc_curve$auc
plot(roc_curve, main = "ROC Curve for Naive Bayes Classifier", col = "blue")
abline(a = 0, b = 1, lty = 2, col = "gray")
coords <- coords(roc_curve, "best", best.method = "youden")
optimal_cutoff_nb <- coords$threshold
print(coords)
plot(roc_curve)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'yellow', cex = 0.7)
legend("bottomright", pch = 19, col = 'yellow', legend = paste("Optimal cutoff:", round(optimal_cutoff_nb, 4)))
predicted_classes <- ifelse(probabilities > optimal_cutoff_nb, 1, 0)
# Skutočné triedy
actual_classes <- testing_data_nb$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
predicted_classes <- ifelse(probabilities_nb > optimal_cutoff_nb, 1, 0)
# Skutočné triedy
actual_classes <- testing_data_nb$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
predicted_classes <- ifelse(probabilities_nb[, "1"] > optimal_cutoff_nb, 1, 0)
# Skutočné triedy
actual_classes <- factor(testing_data_nb$Diabetes, levels = c("0", "1"))
predicted_classes <- factor(predicted_classes, levels = c("0", "1"))
# Vytvorenie konfúznej matice
conf_matrix <- caret::confusionMatrix(predicted_classes, actual_classes, positive = "1")
predicted_classes <- ifelse(probabilities_nb[, "1"] > optimal_cutoff_nb, 1, 0)
# Skutočné triedy
actual_classes <- factor(testing_data_nb$Diabetes, levels = c("0", "1"))
predicted_classes <- factor(predicted_classes, levels = c("0", "1"))
# Vytvorenie konfúznej matice
conf_matrix <- caret::confusionMatrix(predicted_classes, actual_classes, positive = "1")
print(conf_matrix)
predicted_classes <- ifelse(probabilities_nb[, "1"] > optimal_cutoff_nb, 0, 1)
# Skutočné triedy
actual_classes <- factor(testing_data_nb$Diabetes, levels = c("0", "1"))
predicted_classes <- factor(predicted_classes, levels = c("0", "1"))
# Vytvorenie konfúznej matice
conf_matrix <- caret::confusionMatrix(predicted_classes, actual_classes, positive = "0")
print(conf_matrix)
predicted_classes <- ifelse(probabilities_nb[, "1"] > optimal_cutoff_nb, 1, 0)
# Skutočné triedy
actual_classes <- factor(testing_data_nb$Diabetes, levels = c("0", "1"))
predicted_classes <- factor(predicted_classes, levels = c("0", "1"))
# Vytvorenie konfúznej matice
conf_matrix <- caret::confusionMatrix(predicted_classes, actual_classes, positive = "1")
print(conf_matrix)
predictions <- predict(final_model_svm, newdata = testing_data, probability = TRUE)
probabilities <- attr(predictions, "probabilities")[,1]
head(probabilities)
roc_result <- roc(testing_data$Diabetes, probabilities)
plot(roc_result, main = "ROC Curve")
print(roc_result$auc)
abline(a = 0, b = 1, lty = 2, col = "gray")
coords <- coords(roc_result, "best", best.method = "youden")
optimal_cutoff <- coords$threshold
optimal_sensitivity <- coords$sensitivity
optimal_specificity <- coords$specificity
print(optimal_sensitivity)
print(optimal_specificity)
plot(roc_result)
points(coords$specificity, coords$sensitivity, pch = 19, col = 'red', cex = 0.7)
legend("bottomright", pch = 19, col = 'red', legend = paste("Optimal cutoff:", round(optimal_cutoff, 4)))
optimal_cutoff
#print(probabilities)
predicted_classes <- ifelse(probabilities >optimal_cutoff, 1, 0)
# Skutočné triedy
actual_classes <- testing_data$Diabetes
# Vytvorenie konfúznej matice
caret::confusionMatrix(as_factor(predicted_classes), as_factor(actual_classes), positive = "1")
set.seed(123) # for reproducibility
train_index <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
predictors  <- names(data)[names(data) != "BMI"]
response <- "BMI"
x_train <- as.matrix(train_data[, predictors])
y_train <- train_data[, response]
x_test <- as.matrix(test_data[, predictors])
y_test <- test_data[, response]
lasso_model <- glmnet(x_train, y_train, alpha = 1)
plot(lasso_model, xvar = "lambda")
lasso_pred <- predict(lasso_model, s = 0.2, newx = x_test)
mse <- mean((lasso_pred - y_test)^2)
rmse <- sqrt(mse)
rsquared <- 1 - mse / var(y_test)
# Summary table
results <- data.frame(Method = "Lasso",
Lambda = 0.2,
MSE = mse,
RMSE = rmse,
R_squared = rsquared)
results
# Model Validation. Estimate the model on the testing data.
lasso_test = glmnet(X.test, Y.test, alpha = 1, lambda = 0.2)      # LASSO on test dataset
set.seed(123) # for reproducibility
train_index <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
predictors  <- names(data)[names(data) != "BMI"]
response <- "BMI"
x_train <- as.matrix(train_data[, predictors])
y_train <- train_data[, response]
x_test <- as.matrix(test_data[, predictors])
y_test <- test_data[, response]
lasso_model <- glmnet(x_train, y_train, alpha = 1)
plot(lasso_model, xvar = "lambda")
lasso_pred <- predict(lasso_model, s = 0.2, newx = x_test)
mse <- mean((lasso_pred - y_test)^2)
rmse <- sqrt(mse)
rsquared <- 1 - mse / var(y_test)
# Summary table
results <- data.frame(Method = "Lasso",
Lambda = 0.2,
MSE = mse,
RMSE = rmse,
R_squared = rsquared)
results
# Model Validation. Estimate the model on the testing data.
lasso_test = glmnet(x_test, y_test, alpha = 1, lambda = 0.2)      # LASSO on test dataset
lasso_test_coef = predict(lasso_test, type = "coefficients", s = 0.2)
lasso_test_coef
# Define predictors and response variable
all_predictors <- names(data)[names(data) != "BMI"]
response <- "BMI"
# Split the data into train and test sets
set.seed(123) # for reproducibility
train_index <- createDataPartition(data$BMI, p = 0.7, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
x_train <- as.matrix(train_data[, all_predictors])
y_train <- train_data[, response]
x_test <- as.matrix(test_data[, all_predictors])
y_test <- test_data[, response]
num_folds <- 5
# Use k-fold cross-validation to select optimal lambda
lasso_cv <- cv.glmnet(x_train, y_train, alpha = 1, nfolds = num_folds)
min_error_lambda <- lasso_cv$lambda.min
min_error_lambda_index <- which(lasso_cv$lambda == min_error_lambda)
min_error_lambda_coefficients <- coef(lasso_cv, s = min_error_lambda)
# Select lambda one standard deviation away from the minimum error
lambda_sd <- lasso_cv$lambda.1se
lambda_sd_index <- which(lasso_cv$lambda == lambda_sd)
lambda_sd_coefficients <- coef(lasso_cv, s = lambda_sd)
# Print minimum error Lambda and minimum error lambda coefficients
cat("Minimum error Lambda:", min_error_lambda, "\n")
cat("Minimum error lambda coefficients:\n")
print(min_error_lambda_coefficients)
cat("Lambda one standard deviation away from minimum error:", lambda_sd, "\n")
cat("Lambda one standard deviation away lambda coefficients:\n")
print(lambda_sd_coefficients)
# Make predictions based on the testing data using minimum error lambda
lasso_pred_min_error <- predict(lasso_cv, newx = x_test, s = min_error_lambda)
# Make predictions based on the testing data using lambda one standard deviation away from minimum error
lasso_pred_sd <- predict(lasso_cv, newx = x_test, s = lambda_sd)
# Evaluate model performance for minimum error lambda
mse_min_error <- mean((lasso_pred_min_error - y_test)^2)
rmse_min_error <- sqrt(mse_min_error)
rsquared_min_error <- 1 - mse_min_error / var(y_test)
# Evaluate model performance for lambda one standard deviation away from minimum error
mse_sd <- mean((lasso_pred_sd - y_test)^2)
rmse_sd <- sqrt(mse_sd)
rsquared_sd <- 1 - mse_sd / var(y_test)
# Summary table for k-fold cross-validation model
results_kfold_sd <- data.frame(Method = "Lasso with k-fold CV 1 SD away from min err",
Lambda = lambda_sd,
MSE = mse_sd,
RMSE = rmse,
R_squared = rsquared_sd)
results_min_error <- data.frame(Method = "Lasso with k-fold CV Optimal Lambda",
Lambda = min_error_lambda,
MSE = mse_min_error,
RMSE = rmse_min_error,
R_squared = rsquared_min_error)
results_kfold
# Summary table for k-fold cross-validation model
results_kfold_sd <- data.frame(Method = "Lasso with k-fold CV 1 SD away from min err",
Lambda = lambda_sd,
MSE = mse_sd,
RMSE = rmse,
R_squared = rsquared_sd)
results_min_error <- data.frame(Method = "Lasso with k-fold CV Optimal Lambda",
Lambda = min_error_lambda,
MSE = mse_min_error,
RMSE = rmse_min_error,
R_squared = rsquared_min_error)
results_kfold_sd
# Comparison table
combined_results <- rbind(results, results_min_error,results_kfold_sd)
# Display combined results
print(combined_results)
